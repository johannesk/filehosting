#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2009
# License:: AGPL3
#
#--
# This file is part of filehosting.
#
# filehosting is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# filehosting is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with filehosting.  If not, see <http://www.gnu.org/licenses/>.
#++
#

require "filehosting/config"
require "filehosting/autoconfigreader"
require "filehosting/configfilereader"
require "filehosting/configargreader"
require "filehosting/error"
require "filehosting/time"

require "uuidtools"

class UpdateArgReader < FileHosting::ConfigArgReader
	
	def banner
		super + " <uuid>"
	end

	def help_filename
		"update filename"
	end

	def switch_filename(filename)
		@values[:set_filename]= filename
	end
	alias :switch_n :switch_filename

	def help_source
		"update source"
	end

	def switch_source(source)
		@values[:set_source]= source
	end
	alias :switch_c :switch_source

	def help_tags
		"update tags"
	end

	def switch_tags(tags)
		@values[:set_tags]= tags.split(" ")
	end
	alias :switch_t :switch_tags

	def help_date
		"update date(DD.MM.YYYY HH:MM:SS)"
	end

	def switch_date(str)
		begin
			@values[:set_date]= Time.from_form(str)
		rescue ArgumentError
			STDERR.puts "time must be in form 'DD.MM.YYYY HH:MM:SS'"
			exit 1
		end
	end
	alias :switch_d :switch_date

	def help_groups
		"update groups"
	end

	def switch_groups(groups)
		@values[:set_groups]= groups.split(" ")
	end
	alias :switch_g :switch_groups

end

begin
	autoreader= FileHosting::AutoConfigReader.new
	etcreader= FileHosting::ConfigFileReader.new("/etc/filehostingrc")
	homereader= FileHosting::ConfigFileReader.new("#{ENV["HOME"]}/.filehostingrc")
	argreader= UpdateArgReader.new
	args= argreader.parse(ARGV)

	config= FileHosting::Config.new(autoreader, etcreader, homereader, argreader)

	if args.size != 1
		STDERR.puts argreader.usage
		exit 1
	end
	begin
		uuid= UUID.parse(args[0])
	rescue ArgumentError => e
		STDERR.puts e
		exit 1
	end

	fileinfo= config.datasource.fileinfo(uuid)

	if config[:set_filename]
		fileinfo.filename= config[:set_filename]
	end

	if config[:set_source]
		fileinfo.source= config[:set_source]
	end

	if config[:set_tags]
		fileinfo.tags= config[:set_tags]
	end

	if config[:set_date]
		fileinfo.user_time= config[:set_date]
	end

	if config[:set_groups]
		fileinfo.groups= config[:set_groups]
	end

	config.datasource.update_fileinfo(fileinfo)
rescue FileHosting::Error => e
	puts e
	exit 2
end
