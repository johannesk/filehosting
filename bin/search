#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2009
# License:: AGPL3
#
#--
# This file is part of filehosting.
#
# filehosting is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# filehosting is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with filehosting.  If not, see <http://www.gnu.org/licenses/>.
#++
#

require "filehosting/config"
require "filehosting/autoconfigreader"
require "filehosting/configfilereader"
require "filehosting/configargreader"
require "filehosting/error"
require "filehosting/rule"
require "filehosting/ruleerror"

class SearchArgReader < FileHosting::ConfigArgReader
	
	def banner
		super + " <tag ... tag>"
	end

	def help_partialmatch
		"also find files with only partial matches"
	end

	def switch_partialmatch
		@values[:partial_match]= true
	end
	alias :switch_p :switch_partialmatch

	def help_uuid
		"display only uuid's"
	end

	def switch_uuid
		@values[:uuid_only]= true
	end
	alias :switch_i :switch_uuid

	def help_count
		"display only how many files where found"
	end

	def switch_count
		@values[:display_count]= true
	end
	alias :switch_c :switch_count

	def help_rule
		"display only files matching the rule"
	end

	def switch_rule(rule)
		@values[:rule]= FileHosting::Rule.new(true) unless @values[:rule]
		begin
			@values[:rule].add_raw(rule)
		rescue FileHosting::RuleError
			STDERR.puts "error in rule '#{rule}'"
			exit 1
		end
	end
	alias :switch_r :switch_rule

end

begin
	autoreader= FileHosting::AutoConfigReader.new
	etcreader= FileHosting::ConfigFileReader.new("/etc/filehostingrc")
	homereader= FileHosting::ConfigFileReader.new("#{ENV["HOME"]}/.filehostingrc")
	argreader= SearchArgReader.new
	args= argreader.parse(ARGV)

	config= FileHosting::Config.new(autoreader, etcreader, homereader, argreader)

	if args.size < 1
		STDERR.puts argreader.usage
		exit 1
	end

	args= config.datasource.optimize_search(args) if $human
	fileinfos= config.datasource.search_tags(args, config[:rule])
	fileinfos_partial= config.datasource.search_tags_partial(args, config[:rule]) if config[:partial_match]
rescue FileHosting::Error => e
	puts e
	exit 2
end

puts "#{fileinfos.size}#{$human ? " Files found" : ""}" if $human or config[:display_count]
puts "#{fileinfos_partial.size}#{$human ? " Files with partial match found" : ""}" if config[:partial_match] and ($humon or config[:display_count])
exit 0 if config[:display_count]
puts if $human and fileinfos.size > 0
fileinfos+= fileinfos_partial if config[:partial_match]
puts((fileinfos).collect do |f|
	unless config[:uuid_only]
		f.to_text + "\n"
	else
		f.uuid.to_s
	end
end.join("\n")) if fileinfos.size > 0
