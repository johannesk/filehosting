#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2009
# License:: AGPL3
#
#--
# This file is part of filehosting.
#
# filehosting is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# filehosting is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with filehosting.  If not, see <http://www.gnu.org/licenses/>.
#++
#

require "filehosting/config"
require "filehosting/autoconfigreader"
require "filehosting/configfilereader"
require "filehosting/configargreader"
require "filehosting/error"

class UpdateUserArgReader < FileHosting::ConfigArgReader
	
	def banner
		super + "[username]"
	end

	def help_newpassword
		"update password"
	end

	def switch_newpassword(password)
		@values[:set_password]= password
	end
	alias :switch_n :switch_newpassword

	def help_active
		"update active state"
	end

	def switch_active(active)
		@values[:set_active]= case active.downcase
		when "true"
			true
		when "false"
			false
		else
			STDERR.puts "active can only be 'true' or 'false'"
			exit 1
		end
	end
	alias :switch_a :switch_active

	def help_groups
		"update groups"
	end

	def switch_groups(groups)
		@values[:set_groups]= groups.split(" ")
	end
	alias :switch_g :switch_groups

end

begin
	autoreader= FileHosting::AutoConfigReader.new
	etcreader= FileHosting::ConfigFileReader.new("/etc/filehostingrc")
	homereader= FileHosting::ConfigFileReader.new("#{ENV["HOME"]}/.filehostingrc")
	argreader= UpdateUserArgReader.new
	args= argreader.parse(ARGV)

	config= FileHosting::Config.new(autoreader, etcreader, homereader, argreader)

	if args.size > 1
		STDERR.puts argreader.usage
		exit 1
	end
	username= args[0] || config.datasource.user.username

	user= config.datasource.user(username)

	if config[:set_password]
		user.generate_hash(config[:set_password])
	end

	if !config[:set_active].nil?
		user.active= config[:set_active]
	end

	if config[:set_groups]
		user.groups= config[:set_groups]
	end

	config.datasource.update_user(user)
rescue FileHosting::Error => e
	puts e
	exit 2
end
