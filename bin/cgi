#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2009
# License:: AGPL3
#
#--
# This file is part of filehosting.
#
# filehosting is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# filehosting is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with filehosting.  If not, see <http://www.gnu.org/licenses/>.
#++
#

require "filehosting/web-tiny"

require "pathname"
require "time"

input = if (ENV["CONTENT_LENGTH"] || "0").to_i > 0
	STDIN
else
	nil
end

date= if ENV["HTTP_IF_NOT_MODIFIED_SINCE"]
	begin
		date= Time.httpdate(ENV["HTTP_IF_NOT_MODIFIED_SINCE"])
	rescue ArgumentError
		puts "Status: 400\n\n"
		exit
	end
else
	nil
end

if ENV["HTTP_AUTHORIZATION"]
	require "filehosting/config"
	require "filehosting/configfilereader"
	require "base64"
	auth= Hash.new
	unless ENV["HTTP_AUTHORIZATION"]=~ /^Basic\s+/
		puts "Status: 400"
		puts
		exit
	end
	Base64.decode64($')=~ /^([^:]*):(.*?)$/
	auth[:username]= $1
	auth[:password]= $2
	etcreader= FileHosting::ConfigFileReader.new("/etc/filehostingrc")
	homereader= FileHosting::ConfigFileReader.new("#{ENV["HOME"]}/.filehostingrc")
	localreader= FileHosting::ConfigFileReader.new("./filehostingrc")
	config= FileHosting::Config.new(etcreader, homereader, localreader, auth)
	web= FileHosting::Web.new(config)
	io= web.get_page((ENV["PATH_INFO"] || "").sub(/^\//, ""), FileHosting::Web.parse_get(ENV["QUERY_STRING"]) || Hash.new, input, ENV["CONTENT_TYPE"])
else
	if cookies= ENV["HTTP_COOKIE"] and cookies.split("; *").any? { |cookie| cookie=~ /^logged-in=/ }
		puts "Status: 401"
		puts "WWW-Authenticate: Basic realm=\"logged-in\""
		puts
	end
	web= FileHosting::Web.new({:storage_args => "/tmp/johannes/filehosting"})
	io= web.get_page((ENV["PATH_INFO"] || "").sub(/^\//, ""), FileHosting::Web.parse_get(ENV["QUERY_STRING"]) || Hash.new, input, ENV["CONTENT_TYPE"]) do
		require "filehosting/config"
		require "filehosting/configfilereader"
		etcreader= FileHosting::ConfigFileReader.new("/etc/filehostingrc")
		homereader= FileHosting::ConfigFileReader.new("#{ENV["HOME"]}/.filehostingrc")
		localreader= FileHosting::ConfigFileReader.new("./filehostingrc")
		config= FileHosting::Config.new(etcreader, homereader, localreader)
		web.config= config
	end
end

unless io
	exit 1
end

require "io2io"
[io].flatten.each do |out|
	case out
	when String
		print out
	when IO
		IO2IO.do(out, STDOUT)
	end
end
